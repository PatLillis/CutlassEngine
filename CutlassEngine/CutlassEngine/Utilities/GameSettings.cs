using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;

namespace Cutlass.Utilities
{
    /// <summary>
    /// Game settings, stored in a custom xml file. The reason for this is
    /// we want to be able to store our game data on the Xbox360 too.
    /// On the PC we could just use a Settings/config file and have all the
    /// code autogenerated for us, but this way it works both on PC and Xbox.
    /// Note: The default instance for the game settings is in this class,
    /// this way we get the same behaviour as for normal Settings files!
    /// </summary>
    [Serializable]
    public class GameSettings
    {
        #region Properties

        private string _playerName = "Player";
        /// <summary>
        /// Player name.
        /// </summary>
        public string PlayerName
        {
            get { return _playerName; }
            set
            {
                if (_playerName != value)
                    _needSave = true;
                _playerName = value;
            }
        }

        public const int MinimumResolutionWidth = 1024;

        private int _resolutionWidth = 0;
        /// <summary>
        /// Resolution width.
        /// </summary>
        public int ResolutionWidth
        {
            get { return _resolutionWidth; }
            set
            {
                if (_resolutionWidth != value)
                    _needSave = true;
                _resolutionWidth = value;
            }
        }

        public const int MinimumResolutionHeight = 768;

        private int _resolutionHeight = 0;
        /// <summary>
        /// Resolution height.
        /// </summary>
        public int ResolutionHeight
        {
            get { return _resolutionHeight; }
            set
            {
                if (_resolutionHeight != value)
                    _needSave = true;
                _resolutionHeight = value;
            }
        }

        private bool _fullscreen = false;
        /// <summary>
        /// Fullscreen.
        /// </summary>
        public bool Fullscreen
        {
            get { return _fullscreen; }
            set
            {
                if (_fullscreen != value)
                    _needSave = true;
                _fullscreen = value;
            }
        }

        private string _locale = "en-US";
        /// <summary>
        /// Locale
        /// </summary>
        public string Locale
        {
            get { return _locale; }
            set
            {
                if (_locale != value)
                    _needSave = true;
                _locale = value;
            }
        }

        private bool _insults = false;
        /// <summary>
        /// Devastating Insults.
        /// </summary>
        public bool Insults
        {
            get { return _insults; }
            set
            {
                if (_insults != value)
                    _needSave = true;
                _insults = value;
            }
        }

        private int _oceanColor = 0;
        /// <summary>
        /// Ocean Color
        /// </summary>
        public int OceanColor
        {
            get { return _oceanColor; }
            set
            {
                if (_oceanColor != value)
                    _needSave = true;
                _oceanColor = value;
            }
        }

        private bool _postScreenEffects = true;
        /// <summary>
        /// All the shiney stuff after rendering is done.
        /// </summary>
        public bool PostScreenEffects
        {
            get { return _postScreenEffects; }
            set
            {
                if (_postScreenEffects != value)
                    _needSave = true;
                _postScreenEffects = value;
            }
        }

        private bool _reflections = true;
        /// <summary>
        /// Show reflections off reflective surfaces.
        /// </summary>
        public bool Reflections
        {
            get { return _reflections; }
            set
            {
                if (_reflections != value)
                    _needSave = true;
                _reflections = value;
            }
        }

        private bool _refractions = true;
        /// <summary>
        /// Show refractions on see through surfaces.
        /// </summary>
        public bool Refractions
        {
            get { return _refractions; }
            set
            {
                if (_refractions != value)
                    _needSave = true;
                _refractions = value;
            }
        }

        private bool _shadowMapping = true;
        /// <summary>
        /// Cast shadows in the environment.
        /// </summary>
        public bool ShadowMapping
        {
            get { return _shadowMapping; }
            set
            {
                if (_shadowMapping != value)
                    _needSave = true;
                _shadowMapping = value;
            }
        }

        private bool _highDetail = true;
        /// <summary>
        /// Use high detail rendering, textures and lighting.
        /// </summary>
        public bool HighDetail
        {
            get { return _highDetail; }
            set
            {
                if (_highDetail != value)
                    _needSave = true;
                _highDetail = value;
            }
        }

        private float _soundVolume = 0.8f;
        /// <summary>
        /// Sound volume.
        /// </summary>
        public float SoundVolume
        {
            get { return _soundVolume; }
            set
            {
                if (_soundVolume != value)
                    _needSave = true;
                _soundVolume = value;
            }
        }

        private float _musicVolume = 0.6f;
        /// <summary>
        /// Music volume.
        /// </summary>
        public float MusicVolume
        {
            get { return _musicVolume; }
            set
            {
                if (_musicVolume != value)
                    _needSave = true;
                _musicVolume = value;
            }
        }

        private float _controllerSensitivity = 0.5f;
        /// <summary>
        /// Controller sensitivity.
        /// </summary>
        public float ControllerSensitivity
        {
            get { return _controllerSensitivity; }
            set
            {
                if (_controllerSensitivity != value)
                    _needSave = true;
                _controllerSensitivity = value;
            }
        }

        #endregion

        #region Default

        /// <summary>
        /// Filename used to store the game settings.
        /// </summary>
        const string SettingsFilename = "config.xml";

        private static GameSettings _defaultInstance = null;
        /// <summary>
        /// Default instance of the game settings.
        /// </summary>
        public static GameSettings Default
        {
            get { return _defaultInstance; }
        }

        /// <summary>
        /// Need to save the game settings file only if true.
        /// </summary>
        private static bool _needSave = false;

        #endregion

        #region Constructor

        /// <summary>
        /// No public constructor! Create the game settings.
        /// </summary>
        private GameSettings() { }

        /// <summary>
        /// Create game settings.  This constructor helps us to only load the
        /// GameSetting once, not again if GameSetting is recreated by
        /// the Deserialization process.
        /// </summary>
        public static void Initialize()
        {
            _defaultInstance = new GameSettings();
            Load();
        }

        #endregion

        #region Load
        /// <summary>
        /// Load
        /// </summary>
        public static void Load()
        {
            _needSave = false;

            FileStream file = FileHelper.LoadGameContentFile(
                SettingsFilename);

            if (file == null)
            {
                // We need a save, but wait to create the file after quitting.
                _needSave = true;
                return;
            }

            // If the file is empty, just create a new file with the default
            // settings.
            if (file.Length == 0)
            {
                // Close the file first.
                file.Close();

                // Check if there is a file in the game directory
                // to load the default game settings.
                file = FileHelper.LoadGameContentFile(SettingsFilename);
                if (file != null)
                {
                    // Load everything into this class.
                    GameSettings loadedGameSetting =
                        (GameSettings)new XmlSerializer(typeof(GameSettings)).Deserialize(file);
                    if (loadedGameSetting != null)
                        _defaultInstance = loadedGameSetting;

                    // Close the file.
                    file.Close();
                }

                // Save the user settings.
                _needSave = true;
                Save();
            }
            else
            {
                // Else load everything into this class with help of the
                // XmlSerializer.
                GameSettings loadedGameSetting =
                    (GameSettings)new XmlSerializer(typeof(GameSettings)).Deserialize(file);
                if (loadedGameSetting != null)
                    _defaultInstance = loadedGameSetting;

                // Close the file.
                file.Close();
            }
        }

        #endregion

        #region Save

        /// <summary>
        /// Save
        /// </summary>
        public static void Save()
        {
            // No need to save if everything is up to date.
            if (!_needSave)
                return;

            _needSave = false;

            FileStream file = FileHelper.SaveGameContentFile(
                SettingsFilename);

            // Save everything in this class with help from the XmlSerializer.
            new XmlSerializer(typeof(GameSettings)).Serialize(file, _defaultInstance);

            // Close the file.
            file.Close();
        }

        /// <summary>
        /// Set the minimum graphics capabilities.
        /// </summary>
        public static void SetMinimumGraphics()
        {
            GameSettings.Default.ResolutionWidth = GameSettings.MinimumResolutionWidth;
            GameSettings.Default.ResolutionHeight = GameSettings.MinimumResolutionHeight;
            GameSettings.Default.Reflections = false;
            GameSettings.Default.Refractions = false;
            GameSettings.Default.ShadowMapping = false;
            GameSettings.Default.HighDetail = false;
            GameSettings.Default.PostScreenEffects = false;
            GameSettings.Save();
        }

        #endregion
    }
}