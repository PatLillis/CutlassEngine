using System;
using System.IO;
using System.Xml.Serialization;

namespace Cutlass.Utilities
{
    /// <summary>
    /// Game settings, stored in a custom xml file. The reason for this is
    /// we want to be able to store our game data on the Xbox360 too.
    /// On the PC we could just use a Settings/config file and have all the
    /// code autogenerated for us, but this way it works both on PC and Xbox.
    /// Note: The default instance for the game settings is in this class,
    /// this way we get the same behaviour as for normal Settings files!
    /// </summary>
    [Serializable]
    public class GameSettings
    {
        #region Properties

        /// <summary>
        /// Player name.
        /// </summary>
        public string PlayerName
        {
            get { return _PlayerName; }
            set
            {
                if (_PlayerName != value)
                    _NeedSave = true;
                _PlayerName = value;
            }
        }
        private string _PlayerName = "Player";

        public const int MinimumResolutionWidth = 1024;

        /// <summary>
        /// Resolution width.
        /// </summary>
        public int ResolutionWidth
        {
            get { return _ResolutionWidth; }
            set
            {
                if (_ResolutionWidth != value)
                    _NeedSave = true;
                _ResolutionWidth = value;
            }
        }
        private int _ResolutionWidth = 0;

        public const int MinimumResolutionHeight = 768;

        /// <summary>
        /// Resolution height.
        /// </summary>
        public int ResolutionHeight
        {
            get { return _ResolutionHeight; }
            set
            {
                if (_ResolutionHeight != value)
                    _NeedSave = true;
                _ResolutionHeight = value;
            }
        }
        private int _ResolutionHeight = 0;

        /// <summary>
        /// Fullscreen.
        /// </summary>
        public bool Fullscreen
        {
            get { return _Fullscreen; }
            set
            {
                if (_Fullscreen != value)
                    _NeedSave = true;
                _Fullscreen = value;
            }
        }
        private bool _Fullscreen = false;

        /// <summary>
        /// Locale
        /// </summary>
        public string Locale
        {
            get { return _Locale; }
            set
            {
                if (_Locale != value)
                    _NeedSave = true;
                _Locale = value;
            }
        }
        private string _Locale = "en-US";

        /// <summary>
        /// Devastating Insults.
        /// </summary>
        public bool Insults
        {
            get { return _Insults; }
            set
            {
                if (_Insults != value)
                    _NeedSave = true;
                _Insults = value;
            }
        }
        private bool _Insults = false;

        /// <summary>
        /// Ocean Color
        /// </summary>
        public int OceanColor
        {
            get { return _OceanColor; }
            set
            {
                if (_OceanColor != value)
                    _NeedSave = true;
                _OceanColor = value;
            }
        }
        private int _OceanColor = 0;

        /// <summary>
        /// All the shiney stuff after rendering is done.
        /// </summary>
        public bool PostScreenEffects
        {
            get { return _PostScreenEffects; }
            set
            {
                if (_PostScreenEffects != value)
                    _NeedSave = true;
                _PostScreenEffects = value;
            }
        }
        private bool _PostScreenEffects = true;

        /// <summary>
        /// Show reflections off reflective surfaces.
        /// </summary>
        public bool Reflections
        {
            get { return _Reflections; }
            set
            {
                if (_Reflections != value)
                    _NeedSave = true;
                _Reflections = value;
            }
        }
        private bool _Reflections = true;

        /// <summary>
        /// Show refractions on see through surfaces.
        /// </summary>
        public bool Refractions
        {
            get { return _Refractions; }
            set
            {
                if (_Refractions != value)
                    _NeedSave = true;
                _Refractions = value;
            }
        }
        private bool _Refractions = true;

        /// <summary>
        /// Cast shadows in the environment.
        /// </summary>
        public bool ShadowMapping
        {
            get { return _ShadowMapping; }
            set
            {
                if (_ShadowMapping != value)
                    _NeedSave = true;
                _ShadowMapping = value;
            }
        }
        private bool _ShadowMapping = true;

        /// <summary>
        /// Use high detail rendering, textures and lighting.
        /// </summary>
        public bool HighDetail
        {
            get { return _HighDetail; }
            set
            {
                if (_HighDetail != value)
                    _NeedSave = true;
                _HighDetail = value;
            }
        }
        private bool _HighDetail = true;

        /// <summary>
        /// Sound volume.
        /// </summary>
        public float SoundVolume
        {
            get { return _SoundVolume; }
            set
            {
                if (_SoundVolume != value)
                    _NeedSave = true;
                _SoundVolume = value;
            }
        }
        private float _SoundVolume = 0.8f;

        /// <summary>
        /// Music volume.
        /// </summary>
        public float MusicVolume
        {
            get { return _MusicVolume; }
            set
            {
                if (_MusicVolume != value)
                    _NeedSave = true;
                _MusicVolume = value;
            }
        }
        private float _MusicVolume = 0.6f;

        /// <summary>
        /// Controller sensitivity.
        /// </summary>
        public float ControllerSensitivity
        {
            get { return _ControllerSensitivity; }
            set
            {
                if (_ControllerSensitivity != value)
                    _NeedSave = true;
                _ControllerSensitivity = value;
            }
        }
        private float _ControllerSensitivity = 0.5f;

        #endregion

        #region Default

        /// <summary>
        /// Filename used to store the game settings.
        /// </summary>
        private const string _SettingsFilename = "config.xml";

        /// <summary>
        /// Default instance of the game settings.
        /// </summary>
        public static GameSettings Default
        {
            get { return _DefaultInstance; }
        }
        private static GameSettings _DefaultInstance = null;

        /// <summary>
        /// Need to save the game settings file only if true.
        /// </summary>
        private static bool _NeedSave = false;

        #endregion

        #region Constructor

        /// <summary>
        /// No public constructor! Create the game settings.
        /// </summary>
        private GameSettings()
        { }

        /// <summary>
        /// Create game settings.  This constructor helps us to only load the
        /// GameSetting once, not again if GameSetting is recreated by
        /// the Deserialization process.
        /// </summary>
        public static void Initialize()
        {
            _DefaultInstance = new GameSettings();
            Load();
        }

        #endregion

        #region Load
        /// <summary>
        /// Load
        /// </summary>
        public static void Load()
        {
            _NeedSave = false;

            FileStream file = FileHelper.LoadGameContentFile(
                _SettingsFilename);

            if (file == null)
            {
                // We need a save, but wait to create the file after quitting.
                _NeedSave = true;
                return;
            }

            // If the file is empty, just create a new file with the default
            // settings.
            if (file.Length == 0)
            {
                // Close the file first.
                file.Close();

                // Check if there is a file in the game directory
                // to load the default game settings.
                file = FileHelper.LoadGameContentFile(_SettingsFilename);
                if (file != null)
                {
                    // Load everything into this class.
                    GameSettings loadedGameSetting =
                        (GameSettings)new XmlSerializer(typeof(GameSettings)).Deserialize(file);
                    if (loadedGameSetting != null)
                        _DefaultInstance = loadedGameSetting;

                    // Close the file.
                    file.Close();
                }

                // Save the user settings.
                _NeedSave = true;
                Save();
            }
            else
            {
                // Else load everything into this class with help of the
                // XmlSerializer.
                GameSettings loadedGameSetting =
                    (GameSettings)new XmlSerializer(typeof(GameSettings)).Deserialize(file);
                if (loadedGameSetting != null)
                    _DefaultInstance = loadedGameSetting;

                // Close the file.
                file.Close();
            }
        }

        #endregion

        #region Save

        /// <summary>
        /// Save
        /// </summary>
        public static void Save()
        {
            // No need to save if everything is up to date.
            if (!_NeedSave)
                return;

            _NeedSave = false;

            FileStream file = FileHelper.SaveGameContentFile(
                _SettingsFilename);

            // Save everything in this class with help from the XmlSerializer.
            new XmlSerializer(typeof(GameSettings)).Serialize(file, _DefaultInstance);

            // Close the file.
            file.Close();
        }

        /// <summary>
        /// Set the minimum graphics capabilities.
        /// </summary>
        public static void SetMinimumGraphics()
        {
            GameSettings.Default.ResolutionWidth = GameSettings.MinimumResolutionWidth;
            GameSettings.Default.ResolutionHeight = GameSettings.MinimumResolutionHeight;
            GameSettings.Default.Reflections = false;
            GameSettings.Default.Refractions = false;
            GameSettings.Default.ShadowMapping = false;
            GameSettings.Default.HighDetail = false;
            GameSettings.Default.PostScreenEffects = false;
            GameSettings.Save();
        }

        #endregion
    }
}